{"version":3,"sources":["components/Input/Input.tsx","components/FormWrapper/FormWrapper.tsx","components/Auth/Auth.tsx","components/Avatar/Avatar.tsx","components/ChatEntity/ChatEntity.tsx","components/List/List.tsx","components/Message/Message.tsx","services/api/api.ts","components/Chat/Chat.tsx","utils/textareaAutoSize.ts","components/Compose/Compose.tsx","components/Messenger/Messenger.tsx","components/PrivateRoute/PrivateRoute.tsx","components/Registration/Registration.tsx","components/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["Input","props","cn","createCn","error","other","className","resultClassName","invalid","FormWrapper","state","backgroundImage","Unsplash","accessKey","process","photos","getRandomPhoto","collections","then","res","json","data","errors","length","setState","urls","regular","catch","console","styles","this","style","title","children","PureComponent","Auth","fields","login","password","setError","field","text","prevState","unsetError","prevErrors","handleInputChange","event","target","name","value","validateLogin","handleSubmit","preventDefault","Object","keys","history","submitCallback","push","onSubmit","type","placeholder","onChange","onBlur","onClick","Avatar","src","alt","ChatEntity","chatId","timestamp","isSelected","handleChatSelect","dateFormatted","moment","format","resultclassName","List","chats","selected","map","key","Message","startsSequence","author","isOwn","chatMeta","lastMessage","fetchMesssages","slice","messages","Chat","chat","contacts","i","previous","current","showTimestamp","messageId","duration","diff","as","isToday","isSame","commonTimestamp","authorName","renderChat","autoExpand","element","height","scrollHeight","Compose","handleKeyPress","shiftKey","which","handlePushMessage","handleChange","rows","autoComplete","onKeyPress","Messenger","match","params","message","uuidv1","userNames","users","userId","meta","join","PrivateRoute","isAuthenticated","to","Registration","password1","password2","required","App","path","exact","component","render","authorize","bind","React","Boolean","window","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c290a4d5.chunk.js","sourcesContent":["import React, { FC, HTMLProps } from 'react'\nimport {cn as createCn} from '@bem-react/classname'\n\nimport './Input.css'\n\ninterface InputProps {\n    error?: string\n}\n\nexport const Input: FC<InputProps & HTMLProps<HTMLInputElement>> = (props) => {\n    const cn = createCn('input')\n    \n    const {\n        error,\n        className,\n        ...other\n    } = props\n\n    const resultClassName = cn({\n        invalid: !!error\n    })\n\n    return (\n        <div className={resultClassName}>\n            <input className=\"input__control\" {...other} />\n            {error &&\n            <div className=\"input__error\">{error}</div>}\n        </div>\n    )\n}","import React, { PureComponent } from 'react'\nimport Unsplash from 'unsplash-js'\n\nimport './FormWrapper.css'\n\ninterface FormWrapperProps {\n    title: string\n}\n\ninterface FormWrapperState {\n    backgroundImage: string\n}\n\nexport class FormWrapper extends PureComponent<FormWrapperProps, FormWrapperState> {\n    state = {\n        backgroundImage: 'none'\n    }\n\n    componentDidMount() {\n        const UNSPLASH_API_KEY = process.env.REACT_APP_UNSPLASH_API_KEY || ''\n        const unsplash = new Unsplash({accessKey: UNSPLASH_API_KEY})\n\n        unsplash.photos.getRandomPhoto({\n            collections: ['446755']\n        })\n            .then(res => res.json())\n            .then(data => {\n                if (data.errors && !data.errors.length) {\n                    this.setState({\n                        backgroundImage: data.urls.regular\n                    })    \n                }\n            })\n            .catch(error => console.error(error))\n        }\n\n    render() {\n        const styles = {\n            backgroundImage: `url(${this.state.backgroundImage})`\n        }\n\n        return (\n            <div className=\"wrapper\" style={styles}>\n                <div className=\"auth\">\n                    <div className=\"auth__header\">\n                        <span className=\"auth__title\">{this.props.title}</span>\n                    </div>\n                    <div className=\"auth__content\">\n                        {this.props.children}\n                    </div>\n                </div>\n            </div>\n        )       \n    }\n}","import React, { PureComponent, ChangeEvent, FormEvent } from 'react'\nimport {RouteComponentProps} from 'react-router-dom'\n\nimport { Input } from '../Input'\nimport { FormWrapper } from '../FormWrapper'\n\ninterface AuthProps {\n    submitCallback: (userId: TUUID) => void\n}\n\nexport class Auth extends PureComponent<AuthProps & RouteComponentProps, FormState> {\n    state = {\n        fields: {\n            login: 'demo',\n            password: 'demo'\n        },\n        errors: {}\n    }\n\n    setError = (field: string, text: string) => {\n        this.setState(prevState => {\n            return {\n                errors: {\n                    ...prevState.errors,\n                    [field]: text\n                }\n            }\n        })\n    }\n\n    unsetError = (field: string) => {\n        this.setState(prevState => {\n            let prevErrors = {\n                ...prevState.errors\n            }\n\n            delete prevErrors[field]\n\n            return {\n                errors: prevErrors\n            }\n        })\n    }\n    \n    handleInputChange = (event: ChangeEvent<HTMLInputElement>) => {\n        const {name: field, value} = event.target\n        \n        this.unsetError(field)\n\n        this.setState(prevState => {\n            return {\n                fields: {\n                    ...prevState.fields,\n                    [field]: value\n                }\n            }\n        })\n    }\n\n    validateLogin = () => {\n        const login = this.state.fields.login\n\n        //TODO: Написать функцию проверки существования логина\n        if (login !== 'demo') {\n            this.setError('login', 'Такого аккаунта нет')\n        }\n    }\n\n    handleSubmit = (event: FormEvent<HTMLFormElement>) => {\n        event.preventDefault()\n\n        if (Object.keys(this.state.errors).length === 0) {\n            const {history, submitCallback} = this.props\n            const {login, password} = this.state.fields\n    \n            //TODO: Написать функцию валидации пользователя\n            if (login === 'demo' && password === 'demo') {\n                submitCallback('a2d451ac-1c55-49ee-95e4-a1eca43520c7')\n                history.push('/chat')\n            } else {\n                this.setError('password', 'Неверный пароль')\n            }\n        }\n    }\n\n    render() {\n        const history = this.props.history\n\n        return (\n            <FormWrapper title=\"Войдите, чтобы продолжить\">\n                <form onSubmit={this.handleSubmit}>\n                    <div className=\"form-field\">\n                        <Input\n                            name=\"login\"\n                            type=\"text\"\n                            placeholder=\"Введите логин\"\n                            onChange={this.handleInputChange}\n                            onBlur={this.validateLogin}\n                            value={this.state.fields.login}\n                            error={ 'login' in this.state.errors ? this.state.errors['login'] : ''}\n                        />\n                    </div>\n                    \n                    <div className=\"form-field\">\n                        <Input\n                            name=\"password\"\n                            type=\"password\"\n                            placeholder=\"Введите пароль\"\n                            onChange={this.handleInputChange}\n                            value={this.state.fields.password}\n                            error={ 'password' in this.state.errors ? this.state.errors['password'] : ''}\n                        />\n                    </div>\n\n                    <button className=\"button\" type=\"submit\">Войти</button>\n                    \n                    <button\n                        className=\"button button_view_pseudo\"\n                        onClick={() => { history.push('/registration') }}\n                    >\n                        Зарегистрироваться\n                    </button>\n                </form>\n            </FormWrapper>\n        )\n    }\n}","import React, { FC } from 'react'\n\nimport './Avatar.css'\n\ninterface AvatarProps {\n    src?: string\n    alt?: string\n}\n\nexport const Avatar: FC<AvatarProps> = ({src, alt}) => (\n    <div className=\"avatar\">\n        {src &&\n            <img className=\"avatar__image\" src={src} alt={alt} />\n        }\n    </div>\n)","import React from 'react'\nimport {cn as createCn} from '@bem-react/classname'\nimport moment from 'moment'\n\nimport './ChatEntity.css'\nimport {Avatar} from '../Avatar'\n\ninterface ChatEntityProps {\n    chatId: TUUID\n\n    // Дата последнего сообщения\n    timestamp: string\n    \n    //Заголовок чата\n    name: string\n\n    //Последнее сообщение или описание\n    text?: string\n\n    isSelected: boolean\n\n    //Обработчик нажатия на плашку чата\n    handleChatSelect: (chatId: TUUID) => () => void\n}\n\nexport const ChatEntity: React.FC<ChatEntityProps> = (props) => {\n    const cn = createCn('chat-entity')\n\n    const {\n        chatId,\n        timestamp,\n        name,\n        text,\n        isSelected,\n        handleChatSelect\n    } = props\n\n    const dateFormatted = moment(timestamp).format('DD.MM.YYYY')\n\n    const resultclassName = cn({\n        'selected': isSelected\n    })\n\n    return (\n        <li className={resultclassName} onClick={handleChatSelect(chatId)}>\n            <div className=\"chat-entity__prepend\">\n                <Avatar />\n            </div>\n            <div className=\"chat-entity__body\">\n                <div className=\"chat-entity__horizontal-layout\">\n                    <div className=\"chat-entity__header\">{name}</div>\n                    <div className=\"chat-entity__date\">{dateFormatted}</div>\n                </div>\n                { text && <div className=\"chat-entity__text\">{text}</div> }\n            </div>\n        </li>\n    )\n}","import React from 'react'\n\nimport {ChatEntity} from '../ChatEntity'\nimport './List.css'\n\ninterface ListProps {\n    chats: TChat[]\n    \n    //Ключ выбранного чата\n    selected: TUUID | undefined\n\n    //Обработчик нажатия на плашку чата\n    handleChatSelect: (chatId: TUUID) => () => void\n}\n\nexport const List: React.FC<ListProps> = (props) => {\n    const {\n        chats,\n        selected,\n        handleChatSelect,\n    } = props\n\n    return (\n        <ul className=\"list\">\n            {chats.map(({chatId, ...other}) => (\n                <ChatEntity\n                    key={chatId}\n                    chatId={chatId}\n                    isSelected={chatId === selected}\n                    handleChatSelect={handleChatSelect}\n                    {...other}\n                />\n            ))}\n        </ul>\n    )\n}\n","import React from 'react'\nimport {cn as createCn} from '@bem-react/classname'\n\nimport './Message.css'\n\nexport interface MessageProps {\n    timestamp: string\n    text: string\n    author?: string\n    isOwn?: boolean\n    startsSequence?: boolean\n}\n\nexport const Message: React.FC<MessageProps> = (props) => {\n    const cn = createCn('message')\n    \n    const {\n        text,\n        timestamp,\n        startsSequence,\n        author,\n        isOwn\n    } = props\n\n    const resultClassName = cn({\n        'own': isOwn\n    })\n\n    return (\n\n        <div className={resultClassName}>\n            <div className=\"message__balloon\">\n                {startsSequence && !isOwn && <div className=\"message__author\">{author}</div>}\n                <div className=\"message__content\">{text}</div>\n                <div className=\"message__info\">\n                    <div className=\"message__date\">{timestamp}</div>\n                </div>\n            </div>\n        </div>\n    )\n}","import chats from  './fakeData/chats.json'\nimport messages from  './fakeData/messages.json'\nimport contacts from  './fakeData/contacts.json'\n\n//Чаты\nexport const fetchChats = () => chats.map(chat => {\n    const chatId = chat.chatId\n    const userNames = chat.users.map(userId => (contacts as TContactsMap)[userId])\n    const meta = chatMeta(chatId)\n\n    return {\n        chatId,\n        name: userNames.join(', '),\n        ...meta\n    }\n})\n\nexport const chatMeta = (chatId: TUUID) => {\n    const lastMessage = fetchMesssages(chatId).slice(-1)[0]\n\n    //TODO: рефакторинг\n    return {\n        text: lastMessage?.text ?? '',\n        timestamp: lastMessage?.timestamp ?? ''\n    }\n}\n\n//Сообщения\nexport const fetchMesssages = (chatId: TUUID)  => (messages as TMessagesMap)[chatId]\n\n//Контакты\nexport const fetchContacts = () => contacts","import React from 'react'\nimport moment from 'moment'\nimport 'moment/locale/ru'\n\nimport {Message} from '../Message'\nimport {fetchContacts} from '../../services/api'\n\nimport './Chat.css'\n\ninterface ChatProps {\n    messages: TMessage[]\n}\n\nexport const Chat: React.FC<ChatProps> = ({messages}) => {\n\n    const renderChat= () => {\n        let chat = []\n        const contacts: TContactsMap = fetchContacts()\n\n        for (let i = 0; i < messages.length; i++) {\n            const previous = messages[i-1]\n            const current = messages[i]\n            let showTimestamp = true\n            let startsSequence = true\n\n            const {\n                messageId,\n                text,\n                timestamp,\n                author\n            } = current\n\n            if (previous) {\n                const past = moment.duration(moment(current.timestamp).diff(previous.timestamp))\n\n                if (past.as('days') < 1) {\n                    showTimestamp = false\n                }\n\n                if (current.author === previous.author) {\n                    startsSequence = false\n                }\n            }\n\n            const isToday = moment(timestamp).isSame(moment(), 'day')\n\n            if (showTimestamp) {\n                const commonTimestamp: string = isToday\n                    ? 'Сегодня'\n                    : moment(timestamp).format('DD MMMM Y')\n\n                chat.push(\n                    <div key={timestamp} className=\"timestamp\">{commonTimestamp}</div>\n                )\n            }\n\n            //TODO: получить ключ авторизованного пользователя из родительского компонента\n            const isOwn = current.author === 'a2d451ac-1c55-49ee-95e4-a1eca43520c7'\n\n            const authorName = isOwn\n                ? 'Вы' \n                : contacts[author]\n\n            chat.push(\n                <Message\n                    key={messageId}\n                    text={text}\n                    timestamp={moment(timestamp).format('h:mm')}\n                    isOwn={isOwn}\n                    startsSequence={startsSequence}\n                    author={authorName}\n                />\n            )\n        }\n\n        return chat\n    }\n\n    return (\n        <div className=\"chat\">\n            {renderChat()}\n        </div>\n    )\n}","export const autoExpand = (element: HTMLTextAreaElement) => {\n    element.style.height = 'inherit'\n\n    const height = element.scrollHeight\n\n    element.style.height = `${height}px`\n}\n","import React, {PureComponent, KeyboardEvent, ChangeEvent} from 'react'\nimport './Compose.css'\nimport {autoExpand} from '../../utils/textareaAutoSize'\n\ninterface ComposeProps {\n    handlePushMessage: (message: string) => void\n}\n\ninterface ComposeState {\n    text: string\n}\n\nexport class Compose extends PureComponent<ComposeProps, ComposeState> {\n    state = {\n        text: ''\n    }\n    \n    handleKeyPress = (event: KeyboardEvent<HTMLTextAreaElement>) => {\n        if (!event.shiftKey && event.which === 13) {\n            event.preventDefault();\n            \n            //TODO: Проверять текст сообщения перед отправкой\n\n            if (this.state.text) {\n                this.props.handlePushMessage(this.state.text)\n                this.setState({\n                    text: ''\n                })    \n            }\n        }\n    }\n\n    handleChange = (event: ChangeEvent<HTMLTextAreaElement>) => {\n        this.setState({\n            text: event.target.value\n        })\n\n        autoExpand(event.target)\n    }\n\n\n    render() {\n        return (\n            <div className=\"compose\">\n                <textarea\n                    className=\"message-editor\"\n                    rows={1}\n                    placeholder=\"Напишите сообщение...\"\n                    autoComplete=\"false\"\n                    onKeyPress={this.handleKeyPress}\n                    onChange={this.handleChange}\n                    value={this.state.text}\n                />\n            </div>\n        )\n    }\n}","import React, {PureComponent} from 'react'\nimport { RouteComponentProps } from 'react-router-dom'\nimport { v1 as uuidv1 } from 'uuid'\nimport moment from 'moment'\n\nimport {List} from '../List'\nimport {Chat} from '../Chat'\nimport './Messenger.css'\nimport {fetchChats, fetchMesssages} from '../../services/api'\nimport {Compose} from '../Compose'\n\ninterface MessengerState {\n    messages: TMessage[]\n    chats: TChat[]\n    selected: TUUID | undefined\n}\n\ninterface MessengerProps {\n    userId?: TUUID\n}\n\ninterface QueryParams {\n    chatId?: string | undefined\n}\n\nexport class Messenger extends PureComponent<MessengerProps & RouteComponentProps<QueryParams>, MessengerState> {\n    state = {\n        messages: [],\n        chats: [],\n        selected: this.props.match.params.chatId,\n    }\n\n    handlePushMessage = (message: string) => {\n        this.setState(prevState => {\n            return {\n                messages: [\n                    ...prevState.messages,\n                    {\n                        messageId: uuidv1(),\n                        text: message,\n                        timestamp: moment().format(),\n                        author: \"a2d451ac-1c55-49ee-95e4-a1eca43520c7\"\n                    }\n                ]\n            }\n        })\n    }\n\n    handleChatSelect = (chatId: TUUID) => {\n        return () => {\n            this.setState({\n                messages: fetchMesssages(chatId),\n                selected: chatId\n            })    \n\n            this.props.history.push(`/chat/${chatId}`)\n        }\n    }\n\n    componentDidMount() {\n        this.setState({\n            chats: fetchChats(),\n\n            //В браузере эту часть сложно увидеть, потому что приложение пока не хранит данные об авторизации\n            messages: this.state.selected ? fetchMesssages(this.state.selected) : []\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"layout\">\n                <div className=\"sidebar\">\n                    <List chats={this.state.chats} selected={this.state.selected} handleChatSelect={this.handleChatSelect}  />\n                </div>\n                <div className=\"main\">\n                    {this.state.selected &&\n                        <>\n                        <Chat messages={this.state.messages} />\n                        <Compose handlePushMessage={this.handlePushMessage} />    \n                        </>\n                    }\n                </div>\n            </div>\n        )    \n    }\n}","import { Route, RouteProps, Redirect } from 'react-router-dom'\nimport React from 'react'\n\ninterface PrivateRouteProps {\n    isAuthenticated: boolean\n}\n\nexport const PrivateRoute:React.FC<PrivateRouteProps & RouteProps> = ({isAuthenticated, ...props}) => {\n    return (\n        isAuthenticated\n            ? <Route {...props} />\n            : <Redirect to='/auth' />\n    )\n}","import React, { PureComponent, ChangeEvent, FormEvent } from 'react'\nimport { RouteComponentProps } from 'react-router-dom'\n\nimport { Input } from '../Input'\nimport { FormWrapper } from '../FormWrapper'\n\ninterface RegistrationProps {\n    submitCallback: (userId: TUUID) => void\n}\n\nexport class Registration extends PureComponent<RegistrationProps & RouteComponentProps, FormState> {\n    state = {\n        fields: {\n            login: '',\n            password1: '',\n            password2: '',\n            name: ''\n        },\n        errors: {}\n    }\n\n    setError = (field: string, text: string) => {\n        this.setState(prevState => {\n            return {\n                errors: {\n                    ...prevState.errors,\n                    [field]: text\n                }\n            }\n        })\n    }\n\n    unsetError = (field: string) => {\n        this.setState(prevState => {\n            let prevErrors = {\n                ...prevState.errors\n            }\n\n            delete prevErrors[field]\n\n            return {\n                errors: prevErrors\n            }\n        })\n    }\n    \n    handleInputChange = (event: ChangeEvent<HTMLInputElement>) => {\n        const {name: field, value} = event.target\n\n        this.unsetError(field)\n\n        this.setState(prevState => {\n            return {\n                fields: {\n                    ...prevState.fields,\n                    [field]: value\n                }\n            }\n        })\n    }\n\n    validateLogin = () => {\n        const login = this.state.fields.login\n\n        //TODO: Написать функцию проверки логина на доступность\n        if (login === 'demo') {\n            this.setError('login', 'Логин уже занят')\n        }\n    }\n\n    handleSubmit = (event: FormEvent<HTMLFormElement>) => {\n        event.preventDefault()\n\n        if (Object.keys(this.state.errors).length === 0) {\n            const {history, submitCallback} = this.props\n            const {password1, password2} = this.state.fields\n            \n            if (password1 !== password2) {\n                this.setError('password2', 'Подтверждение не совпадает с паролем')\n            } else {\n                \n                //Добавление пользователя\n                //...\n                \n                submitCallback('a2d451ac-1c55-49ee-95e4-a1eca43520c7')\n                history.push('/chat')    \n            }\n        }\n    }\n\n    render() {\n        const history = this.props.history\n\n        return (\n            <FormWrapper title=\"Регистрация\">\n                <form onSubmit={this.handleSubmit}>\n                    <div className=\"form-field\">\n                        <Input\n                            name=\"name\"\n                            type=\"text\"\n                            placeholder=\"Имя\"\n                            onChange={this.handleInputChange}\n                            value={this.state.fields.name}\n                            error={ 'name' in this.state.errors ? this.state.errors['name'] : ''}\n                            required\n                        />\n                    </div>\n\n                    <div className=\"form-field\">\n                        <Input\n                            name=\"login\"\n                            type=\"text\"\n                            placeholder=\"Придумайте логин\"\n                            onChange={this.handleInputChange}\n                            onBlur={this.validateLogin}\n                            value={this.state.fields.login}\n                            error={ 'login' in this.state.errors ? this.state.errors['login'] : ''}\n                            required\n                        />\n                    </div>\n                    \n                    <div className=\"form-field\">\n                        <Input\n                            name=\"password1\"\n                            type=\"password\"\n                            placeholder=\"Придумайте пароль\"\n                            onChange={this.handleInputChange}\n                            value={this.state.fields.password1}\n                            error={ 'password1' in this.state.errors ? this.state.errors['password1'] : ''}\n                            required\n                        />\n                    </div>\n\n                    <div className=\"form-field\">\n                        <Input\n                            name=\"password2\"\n                            type=\"password\"\n                            placeholder=\"Повторите пароль\"\n                            onChange={this.handleInputChange}\n                            value={this.state.fields.password2}\n                            error={ 'password2' in this.state.errors ? this.state.errors['password2'] : ''}\n                            required\n                        />\n                    </div>\n\n                    <button className=\"button\" type=\"submit\">Зарегистрироваться</button>\n                    \n                    <button\n                        className=\"button button_view_pseudo\"\n                        onClick={() => { history.push('/auth') }}\n                    >\n                        Войти\n                    </button>\n                </form>\n            </FormWrapper>\n        )\n    }\n}","import React from 'react';\nimport { Switch, Route, Redirect } from 'react-router-dom'\n\nimport { Auth } from '../Auth';\nimport { Messenger } from '../Messenger';\nimport { PrivateRoute } from '../PrivateRoute'\nimport { Registration } from '../Registration';\n\ninterface AppState {\n    isAuthenticated: boolean\n    userId?: TUUID\n}\n\nexport class App extends React.PureComponent<{}, AppState> {\n    state = {\n        isAuthenticated: false,\n        userId: ''\n    }\n\n    authorize(userId: TUUID) {\n        this.setState({\n            isAuthenticated: true,\n            userId\n        })\n    }\n\n    render() {\n        return (\n            <Switch>\n                <PrivateRoute\n                    path=\"/chat\"\n                    isAuthenticated={this.state.isAuthenticated}\n                    exact\n                    component={Messenger} />}\n                />\n                <PrivateRoute\n                    path=\"/chat/:chatId\"\n                    isAuthenticated={this.state.isAuthenticated}\n                    exact\n                    component={Messenger}\n                />\n                <Route\n                    path=\"/auth\"\n                    exact\n                    render={\n                        props => <Auth {...props} submitCallback={this.authorize.bind(this)}  />\n                    }\n                />\n                <Route\n                    path=\"/registration\"\n                    exact\n                    render={\n                        props => <Registration {...props} submitCallback={this.authorize.bind(this)}  />\n                    }\n                />\n                <Redirect to=\"/chat\" />\n            </Switch>\n        )\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { App } from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nimport './styles/reset.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}