{"version":3,"sources":["components/UI/Avatar/Avatar.tsx","components/ChatEntity/ChatEntity.tsx","components/List/List.tsx","components/Message/Message.tsx","components/Chat/Chat.tsx","components/Messenger/fakeData.ts","components/Messenger/Messenger.tsx","containers/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["Avatar","src","alt","className","ChatEntity","chatId","name","text","date","isCurrent","handleClick","chatEntityClass","classNames","onClick","moment","format","List","chats","current","map","chat","key","Message","Chat","messages","message","messageId","Date","Messenger","state","selectChat","fetchMessages","setState","sort","a","b","filter","this","fetchChats","PureComponent","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.b65190ae.chunk.js","sourcesContent":["import React from 'react'\n\nimport {Props} from './types'\n\nimport './Avatar.css'\n\nconst Avatar: Props = ({src, alt}) => (\n    <div className=\"avatar\">\n        {src &&\n            <img className=\"avatar__image\" src={src} alt={alt} />\n        }\n    </div>\n)\n\nexport default Avatar","import React from 'react'\n\nimport {Props} from './types'\nimport Avatar from '../UI/Avatar/Avatar'\nimport classNames from 'classnames';\nimport moment from 'moment'\n\nimport './ChatEntity.css'\n\nconst ChatEntity: Props = ({chatId, name, text, date, isCurrent, handleClick}) => {    \n    const chatEntityClass = classNames('chat-entity', { 'chat-entity_current': isCurrent })\n\n    return (\n        <li className={chatEntityClass} onClick={handleClick(chatId)}>\n            <div className=\"chat-entity__prepend\">\n                <Avatar />\n            </div>\n            <div className=\"chat-entity__body\">\n                <div className=\"chat-entity__horizontal-layout\">\n                    <div className=\"chat-entity__header\">{name}</div>\n                    <div className=\"chat-entity__date\">{moment(date).format('DD.MM.YYYY')}</div>\n                </div>\n                { text && <div className=\"chat-entity__text\">{text}</div> }\n            </div>\n        </li>\n    )\n}\n\nexport default ChatEntity","import React from 'react'\n\nimport {IChat} from '../../types/messanger'\nimport {Props} from './types'\nimport ChatEntity from '../ChatEntity'\n\nimport './List.css'\n\nconst List: Props = ({chats, current, handleClick}) => {\n    const renderChatEntity = (chat: IChat) => (\n        <ChatEntity key={chat.chatId} {...chat} isCurrent={chat.chatId === current } handleClick={handleClick} />\n    )\n    \n    return (\n        <ul className=\"list\">\n            {chats.map(renderChatEntity)}\n        </ul>\n    )    \n}\n\nexport default List","import React from 'react'\n\nimport {Props} from './types'\nimport moment from 'moment'\n\nimport './Message.css'\n\nconst Message: Props = ({text, date}) => {\n    return (\n        <div className=\"message\">\n            <div className=\"message__balloon\">\n                <div className=\"message__content\">{text}</div>\n                <div className=\"message__info\">\n                    <div className=\"message__date\">{moment(date).format(\"DD:MM:YYYY hh:mm\")}</div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Message","import React from 'react'\n\nimport {IMessage} from '../../types/messanger'\nimport {Props} from './types'\nimport Message from '../Message'\n\nimport './Chat.css'\n\nconst Chat: Props = ({messages}) => {    \n    const renderMessage = (message: IMessage) => (\n        <Message key={message.messageId} {...message} />\n    )\n\n    return (\n        <div className=\"chat\">\n            {messages.map(renderMessage)}\n        </div>\n    )    \n}\n\nexport default Chat","const chats = [\n    {\n        chatId: 1,\n        name: 'Тихонов Яков',\n        text: 'И все на дистанционном обучении!',\n        date: new Date(2019, 0, 21),\n        messages: [\n            {\n                messageId: 1,\n                date: new Date(2019, 0, 21, 10, 12),\n                text: 'Прикинь, сон приснился, что у меня четверо детей',\n            },\n            {\n                messageId: 2,\n                date: new Date(2019, 0, 21, 10, 13),\n                text: 'И все на дистанционном обучении!',\n            }\n        ]\n    },\n    {\n        chatId: 2,\n        name: 'Палий Данила',\n        text: 'А может, удалить 2020 и снова установить? А то эта версия с вирусом',\n        date: new Date(2020, 0, 20),\n        messages: [\n            {\n                messageId: 1,\n                date: new Date(2020, 0, 20, 18, 40),\n                text: 'А может, удалить 2020 и снова установить? А то эта версия с вирусом',\n            }\n        ]\n    },\n    {\n        chatId: 3,\n        name: 'Буров Корнелий',\n        text: 'Я говорю - сделай гифку, пусть считают',\n        date: new Date(2018, 3, 10),\n        messages: [\n            {\n                messageId: 1,\n                date: new Date(2018, 3, 10, 14, 0),\n                text: 'Моему сыну по физо прислали: \"Сделать упражнение на плечевой пояс столько-то раз, прислать видео',\n            },\n            {\n                messageId: 2,\n                date: new Date(2018, 3, 10, 14, 2),\n                text: 'Я говорю - сделай гифку, пусть считают',\n            }\n        ]\n\n    },\n    {\n        chatId: 4,\n        name: 'Шухевич Регина',\n        text: 'Ой! А я тебя без маски и не узнала!',\n        date: new Date(2018, 3, 10),\n        messages: [\n            {\n                messageId: 1,\n                date: new Date(2018, 3, 10, 9, 3),\n                text: 'Ой! А я тебя без маски и не узнала!',\n            }\n        ]\n\n    },\n]\n\nexport {chats}","import React, { PureComponent } from 'react'\n\nimport {IChat, IMessage} from '../../types/messanger'\nimport {State} from './types'\nimport List from '../List/List'\nimport Chat from '../Chat/Chat'\n\nimport './Messenger.css'\nimport {chats} from './fakeData'\n\nclass Messenger extends PureComponent {    \n    state: State = {\n        messages: [],\n        chats: [],\n        current: null\n    }\n\n    fetchChats() {\n        const compareDate = (a: IChat, b: IChat): number => {\n            if (a.date < b.date) return 1\n            if (a.date > b.date) return -1\n            return 0\n        }\n\n        return chats.sort(compareDate)\n    }\n\n    fetchMessages(chatId: number): IMessage[] {\n        const chat = chats.filter(chat => chat.chatId === chatId)\n        const messages = (chat[0].messages) ?? []\n\n        return messages\n    }\n\n    selectChat = (chatId: number) => {\n        return () => {\n            const messages = this.fetchMessages(chatId)\n\n            this.setState({\n                messages,\n                current: chatId\n            })    \n        }\n    }\n\n    componentDidMount() {\n        this.setState({\n            chats: this.fetchChats()\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"messenger\">\n                <div className=\"messenger__sidebar\">\n                    <List chats={this.state.chats} current={this.state.current} handleClick={this.selectChat} />\n                </div>\n                <div className=\"messenger__main\">\n                    <Chat messages={this.state.messages} />\n                </div>\n            </div>\n        )    \n    }\n}\n\nexport default Messenger","import React from 'react';\nimport Chat from '../../components/Messenger'\n\nconst App = () => (\n    <Chat />\n)\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './containers/App/App'\nimport * as serviceWorker from './serviceWorker'\n\nimport './styles/reset.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}